Author/home of this file: visit http://c65.lgb.hu/

What was surprising at least for me ... Quite subjective :)

* 65CE02 PHW opcodes does the *opposite* order of lo/hi byte
  storing as eg JSR would push the PC (well, PC + 1)

  This is though not so surprising, as it would be problemtic
  implementing PHW #..., where after the opcode, the _low_
  byte comes, but we would need to push the HI byte first.

  It seems PHW is used somewhere in BASIC. Without PHW
  implemented, the machine "boots" however after pressing RETURN
  on a command / program line, you'll get something odd. If
  you have this problem, maybe it's because of problem with
  the implementation of PHW opcode!

* Some resources do not agree about the addressing mode of
  some opcodes, ie INW/DEW, some of them states it's absolute
  some of them beleives in zero addressing. It seems, the zero
  addressing can win, though.

* C65 in native mode uses VIC3 raster interrupts to produce
  the "periodic IRQ", rather than CIAs, as with the C64.

* 64tass assembler supports 65CE02, cool. HOWEVER, this drove
  me on the wrong path for days ... As it seems 64tass has
  faulty implementation of 16 bit relative mode jump opcodes!
  I've assumed it's OK, and tested my CPU emulator with
  things I compiled with 64tass. And I haven't understood why
  C64 ROM did not work correctly ... Or maybe  - see later,
  as with (nn,SP), Y addressing mode - it can be some kind
  of interesting 4502 vs 65CE02 core incompatibility? I have
  no idea ...

* In addition to the previous entry: be careful with the 16
  bit relative mode. The offset should be not handled the
  same way as with 8 bit relative mode jumps! According to
  some resources at least ... Hmmm. The current implementation
  I use the solution which seems to work with the existing
  ROM images at least :)

* Still with the opcodes ... LDA/STA (nn,SP),Y is kinda odd
  beasts. Maybe I should know 65C816 better, it has these
  as well (though using different opcode numbers). For
  example what happens with 8 bit stack, there are even two
  cases for the possibility to "warping around" then,
  by adding the "nn", and the fact, that it needs a word,
  and if you are unlucky, the "warp around" situation is
  there then ...

* DMA is an important part for the system. it's even used
  to clear/scroll the screen and maybe other memory regions as
  well. Thus, if you don't implement some kind of C65
  DMAgic stuff, it can be a problem ...

* Well, quite "well known" but anyway: C65's internal drive
  is not like C128's. Ie, it is not a drive with its own CPU
  etc. It's driven by the "main CPU" and FDC registers can be
  seen in the I/O area. System also contains the "DOS" code
  in the ROM, and of course the only CPU in the system will
  execute that too! However, it's said that it's possible
  to connect seriel IEC drives too, if you want.

* Colour SRAM: there is no such thing in C65. For real, the
  last 2K (2K, since you need that in 80 columns mode) of
  128K RAM is used for that purpose. For compatibility, you
  can see the *very same* memory content as colour SRAM would
  be in the case of C64! In 80 columns mode you need 2K of
  colour RAM, thus there is a bit in a VIC3 register to
  extend colour SRAM to 2K. It means, that colour RAM in
  the I/O area will *cover and hide* the CIAs and the I/O
  expansion areas! Note: this is only for accessing the
  colour RAM, you can still switch off 2K colour mode,
  as VIC3 seems to be use directly the last 2K of the 128K
  RAM, it's just about the possibility to be able to see it
  inside the I/O area by the CPU! Colour SRAM also have
  the upper 4 bits (unlike C64) and with VIC3 it can be
  used for hardware attributes, ie blinking, underline,
  whatsoever.

* About the DOS code: it uses an interesting trick:
  It switches on the 2K colour SRAM mode, and uses the few
  last bytes (which would be off the screen anyway) of it to
  store information for itself! So, if you don't implement
  this 2K colour SRAM thinggy well enough, the system will
  be crash even at the time of booting, since DOS is called
  once at least!

* Kinda complex memory management. In addition of the
  C64-style "CPU port" (0/1 addresses), the CPU can see
  1Mbytes of memory, but also VIC3 can have the priority
  to override those all, and provide some ROM selects
  based on its register $30. Besides this, CPU can also
  map an area with an offset, and though zero offset
  would mean the same, they are not, since the map/not
  mapped fact is also propogated, it seems ... In addition,
  the upper 512Kbyte of "CPU address space" may be handled
  by the RAM expansion controller, to allow (max of?)
  8Mbytes RAM to be seen there. And not counting the
  colour SRAM case for example, etc.

* Error messages in colour! :) Well, maybe not so surprising,
  but since the first time I see "C65" it was for me while
  testing my emulator. At least in 911001.bin it is colour,
  Not in 910111.bin version of ROM though ...

* Pressing key F1 is a nice way to toggle between 40 and
  80 columns mode.

* 911001.bin ROM is kinda odd. It takes much longer to boot,
  also prints about ROM checksum and drive name ... However it
  does *NOT* work too much ... Well, it can be my problem,
  that's true. BASIC commands works (in direct mode)
  but BASIC program lines (if you try to enter one) are
  refused with "?PROGRAM MANGLED" error. Also LISTing after
  this causes total madness, with endless PI signes, etc.
  910111.bin seems to work, I could type in a simple BASIC
  program, I could LIST and RUN it too.

* Disk access is still not the fastest :( Though I don't emulate
  the mechanics, floppy disk access is still not as fast as
  with other - otherwise much slower - 8 bit machines. It seems
  it's the sign of Commdodore anyway :-) Indeed, faster than
  IEC serial by default at least :)

* VIC-3 in its heart is still a VIC-1, as found in the Commodore
  VIC-20 computer :) Ie, at those times, the 16 pixel height
  characters were introduced mainly to allow to "simulate" bit map
  modes (VIC-I does not know "true" bit map mode) with custom
  "charset" (with 8 pixels height there would be not enough characters
  to do this). Still VIC-II, though has bitmap mode, the screen
  organization looks character oriented still. With VIC-III,
  even the new bitplane modes are still this non-linear fashion.
  Also, though VIC-3 in sum, can access about 128K of RAM, the
  "one chunk" is still limited to 16K (ie, one bitplane, whatever)
  as with the original VIC-I. Text mode with 16 pixels height
  otherwise can be useful for VIC-3, as the 8x8 characters seem
  quite ugly even in 80*25 text mode. 16 pixels height ones could
  be much nicer.

* DMA transfers can be "redirected" to the I/O space. Just thinking
  about if it's possible to the DMA controller to access its own
  registers? Maybe creating an endless loop with chained commands,
  having the last with re-starting the DMA by writing its own
  registers :)

